import path from "path";
import {
  existsSync,
  lstatSync,
  readFileSync,
  PathOrFileDescriptor,
  PathLike,
  writeFileSync,
  mkdirSync,
} from "fs";
import fsUtils from "../utils/fsUtils.js";
import { result, Result, wrapThrowable } from "../types/result.js";
import { matchTagged } from "./unionUtils.js";
import { TwDesignerConfig } from "../types/twDesignerConfig.js";
import chalk from "chalk";

function getTwdDirPath(): string {
  const cwd = process.cwd();
  const directoryPath = path.join(cwd, dirNames.twdBase);

  return directoryPath;
}

function fileExists(path: PathLike): boolean {
  return existsSync(path) && lstatSync(path).isFile();
}

function dirExists(path: PathLike): boolean {
  return existsSync(path) && lstatSync(path).isDirectory();
}

function twdDirExists(): boolean {
  const directoryPath = fsUtils.getTwdDirPath();

  return existsSync(directoryPath) && lstatSync(directoryPath).isDirectory();
}

function createDirIfNotExists(path: string): Result<void> {
  if (dirExists(path)) return result.ok(undefined);

  return wrapThrowable(() => {
    mkdirSync(path);
    console.log(chalk.green(`âœ… Created: ${path}/`), "\n");
  }, `Error creating directory "${path}"`);
}

function configFileExists(): boolean {
  return fileExists(path.join(getTwdDirPath(), fileNames.config));
}

function runningFromProjectRoot(): boolean {
  const pkgJsonPath = path.join(process.cwd(), "package.json");

  return existsSync(pkgJsonPath) && lstatSync(pkgJsonPath).isFile();
}

function readFile(
  path: PathOrFileDescriptor,
  options: BufferEncoding
): Result<string> {
  const msg = `Could not load the file: ${fsUtils.fileNames.config}.`;

  return wrapThrowable(() => readFileSync(path, options), msg);
}

function writeObjToJSONFile<T extends Record<string, unknown>>(
  path: PathLike,
  obj: T
): Result<void> {
  const fileContents = JSON.stringify(obj, null, 2);

  return wrapThrowable(() => {
    writeFileSync(path, fileContents, "utf8");
  }, `Something went wrong while writing to "${path.toString()}"`);
}

function parseConfigFile(): Result<TwDesignerConfig> {
  const fileResult = readFile(
    path.join(getTwdDirPath(), fileNames.config),
    "utf8"
  );

  return matchTagged(fileResult).on<Result<TwDesignerConfig>>({
    err: (e) => e,
    ok: ({ data }) => {
      return result.ok(JSON.parse(data) as TwDesignerConfig);
    },
  });
}

function writeConfigFile(newConfig: TwDesignerConfig): Result<void> {
  return writeObjToJSONFile(getConfigPath(), newConfig);
}

function writeTsFiles({
  colorProperties,
  classNames,
}: TwDesignerConfig): Result<void> {
  // generate the file source from the config.
  const src = `
export const ExtendableTailwindProperties = [
${colorProperties.map((cp) => `  "${cp}",`).join("\n")}
] as const;

export type ExtendableTailwindProperty =
  typeof ExtendableTailwindProperties[number];

export const twToPropMap = {
${colorProperties.map((cp) => `  ${cp}: "${classNames[cp]}",`).join("\n")}
} as const satisfies Record<ExtendableTailwindProperty, string>;

export const ThemeableProperties = [
${colorProperties.map((cp) => `  "${classNames[cp]}",`).join("\n")}
] as const;

export type ThemeableProperty = {
  [K in keyof typeof twToPropMap]: typeof twToPropMap[K];
}[keyof typeof twToPropMap];

export const propToTwMap = {
${colorProperties.map((cp) => `  ${classNames[cp]}: "${cp}",`).join("\n")}
} as const satisfies Record<ThemeableProperty, ExtendableTailwindProperty>;
`;

  const baseDir = getTwdDirPath();

  // write the file
  const propertiesResult = wrapThrowable(() => {
    writeFileSync(path.join(baseDir, fileNames.properties), src, "utf8");
  }, `Something went wrong while writing to "${path.toString()}"`);
  if (propertiesResult.tag === "err") return propertiesResult;

  // write all the other files that dependend on this file.
  return writeAllOtherTsFiles();
}

// file source strings
import themeDefinitonSrc from "../fileContents/themeDefinition.js";
import defaultThemeSrc from "../fileContents/themes/default.js";
import genSrc from "../fileContents/_autogenerated/gen.js";
import genIndexSrc from "../fileContents/_autogenerated/index.js";
import serializeSrc from "../fileContents/_autogenerated/serialize.js";
import derivedSrc from "../fileContents/_autogenerated/types/derived.js";
import typesIndexSrc from "../fileContents/_autogenerated/types/index.js";
import genScriptSrc from "../fileContents/genScript.js";
import { cwd } from "process";

function writeAllOtherTsFiles(): Result<void> {
  let result = writeFile(fileNames._autogeneratedIndex, genIndexSrc);
  if (result.tag === "err") return result;

  result = writeFile(
    fileNames.defaultTheme,
    defaultThemeSrc,
    defaultThemeComment
  );
  if (result.tag === "err") return result;

  result = writeFile(fileNames.derived, derivedSrc);
  if (result.tag === "err") return result;

  result = writeFile(fileNames.gen, genSrc);
  if (result.tag === "err") return result;

  result = writeFile(fileNames.serialize, serializeSrc);
  if (result.tag === "err") return result;

  result = writeFile(fileNames.typesIndex, typesIndexSrc);
  if (result.tag === "err") return result;

  result = writeFile(
    fileNames.themeDefiniton,
    themeDefinitonSrc,
    "//Edit this file using the Themed<Props, States, Variants> primitive to begin theming."
  );
  if (result.tag === "err") return result;

  return writeFile(fileNames.genScript, genScriptSrc(cwd()));
}

function writeFile(
  pathRelativeToBaseDir: string,
  src: string,
  commentString = defaultCommentString
): Result<void> {
  return wrapThrowable(() => {
    writeFileSync(
      path.join(getTwdDirPath(), pathRelativeToBaseDir),
      `${commentString}
      ${src}`,
      "utf8"
    );
  }, `Something went wrong while writing "${pathRelativeToBaseDir}"`);
}

function getConfigPath(): string {
  return path.join(getTwdDirPath(), fileNames.config);
}

function readPackageJSON(): Result<PackageJSONProperties> {
  const fileResult = fsUtils.readFile(path.join("package.json"), "utf8");
  if (fileResult.tag === "err") return fileResult;

  return result.ok(JSON.parse(fileResult.data) as PackageJSONProperties);
}

type PackageJSONProperties = {
  devDependencies?: Record<string, string>;
  type?: "module" | "commonjs";
};

const dirNames = {
  twdBase: "tw-designer",
  _autogenerated: "_autogenerated",
  _autoGeneratedTypes: "_autogenerated/types",
  themes: "themes",
} as const;

const fileNames = {
  config: "tw-designer.config.json",
  derived: `${dirNames._autoGeneratedTypes}/derived.ts`,
  typesIndex: `${dirNames._autoGeneratedTypes}/index.ts`,
  properties: `${dirNames._autoGeneratedTypes}/properties.ts`,
  gen: `${dirNames._autogenerated}/gen.ts`,
  _autogeneratedIndex: `${dirNames._autogenerated}/index.ts`,
  serialize: `${dirNames._autogenerated}/serialize.ts`,
  defaultTheme: `${dirNames.themes}/default.ts`,
  themeDefiniton: `themeDefinition.ts`,
  genScript: `${dirNames._autogenerated}/genScript.ts`,
} as const;

const defaultCommentString = `/**
* IMPORTANT NOTE:
* 
* This file was autogenerated, any changes made will be overidden the next time it is regenerated.
*
*/`;

export default {
  getTwdDirPath,
  dirNames,
  twdDirExists,
  runningFromProjectRoot,
  fileNames,
  readFile,
  fileExists,
  dirExists,
  configFileExists,
  writeObjToJSONFile,
  parseConfigFile,
  writeConfigFile,
  writeTsFiles,
  createDirIfNotExists,
  readPackageJSON,
} as const;

const defaultThemeComment = `/**
* NOTE: This is the default theme that's been generated for you.
* 
* After making changes to ${fsUtils.fileNames.themeDefiniton}, you will get compilations errors in this
* file indicating which properties are now missing or invalid.
*
* After resolving the errors, run "tw-designer gen" to notify TailwindCSS of your updated theme.
*
*/`;
